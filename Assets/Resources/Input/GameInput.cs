//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/CodeBase/Services/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""GamplayInput"",
            ""id"": ""ca1d7796-53d8-45e1-8560-8203d399551c"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""b1a42778-a794-4ab2-88a3-04bd75b2f303"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e6bdf8af-7c24-435e-af62-c24f4614c802"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""0c35e1e7-cf0a-4435-b618-b64e0c7d549b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""3ad08050-cc9a-4a81-bf18-bd7441bb0004"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0033c1b0-9a02-41fc-97cb-1dcdb5b37fc1"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MobileInput"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8f097adb-1f9c-47ab-b08a-fb3fff6c79dd"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MobileInput"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a6af2403-48cc-4d36-8329-8c173ddec374"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MobileInput"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""57ed070e-5efe-4766-86c5-928f4973cf0b"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MobileInput"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""MobileInput"",
            ""bindingGroup"": ""MobileInput"",
            ""devices"": []
        },
        {
            ""name"": ""StandaloneInput"",
            ""bindingGroup"": ""StandaloneInput"",
            ""devices"": []
        }
    ]
}");
        // GamplayInput
        m_GamplayInput = asset.FindActionMap("GamplayInput", throwIfNotFound: true);
        m_GamplayInput_Movement = m_GamplayInput.FindAction("Movement", throwIfNotFound: true);
        m_GamplayInput_Look = m_GamplayInput.FindAction("Look", throwIfNotFound: true);
        m_GamplayInput_Attack = m_GamplayInput.FindAction("Attack", throwIfNotFound: true);
        m_GamplayInput_Jump = m_GamplayInput.FindAction("Jump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GamplayInput
    private readonly InputActionMap m_GamplayInput;
    private IGamplayInputActions m_GamplayInputActionsCallbackInterface;
    private readonly InputAction m_GamplayInput_Movement;
    private readonly InputAction m_GamplayInput_Look;
    private readonly InputAction m_GamplayInput_Attack;
    private readonly InputAction m_GamplayInput_Jump;
    public struct GamplayInputActions
    {
        private @GameInput m_Wrapper;
        public GamplayInputActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_GamplayInput_Movement;
        public InputAction @Look => m_Wrapper.m_GamplayInput_Look;
        public InputAction @Attack => m_Wrapper.m_GamplayInput_Attack;
        public InputAction @Jump => m_Wrapper.m_GamplayInput_Jump;
        public InputActionMap Get() { return m_Wrapper.m_GamplayInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GamplayInputActions set) { return set.Get(); }
        public void SetCallbacks(IGamplayInputActions instance)
        {
            if (m_Wrapper.m_GamplayInputActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_GamplayInputActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_GamplayInputActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_GamplayInputActionsCallbackInterface.OnMovement;
                @Look.started -= m_Wrapper.m_GamplayInputActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_GamplayInputActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_GamplayInputActionsCallbackInterface.OnLook;
                @Attack.started -= m_Wrapper.m_GamplayInputActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_GamplayInputActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_GamplayInputActionsCallbackInterface.OnAttack;
                @Jump.started -= m_Wrapper.m_GamplayInputActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_GamplayInputActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_GamplayInputActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_GamplayInputActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public GamplayInputActions @GamplayInput => new GamplayInputActions(this);
    private int m_MobileInputSchemeIndex = -1;
    public InputControlScheme MobileInputScheme
    {
        get
        {
            if (m_MobileInputSchemeIndex == -1) m_MobileInputSchemeIndex = asset.FindControlSchemeIndex("MobileInput");
            return asset.controlSchemes[m_MobileInputSchemeIndex];
        }
    }
    private int m_StandaloneInputSchemeIndex = -1;
    public InputControlScheme StandaloneInputScheme
    {
        get
        {
            if (m_StandaloneInputSchemeIndex == -1) m_StandaloneInputSchemeIndex = asset.FindControlSchemeIndex("StandaloneInput");
            return asset.controlSchemes[m_StandaloneInputSchemeIndex];
        }
    }
    public interface IGamplayInputActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
}
